"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4871],{54405:function(e,t,a){a.r(t);a(72269),a(93359),a(61788),a(19977),a(25809);var n=a(90978),l=(a(96057),a(64406),a(36930)),c=a(85956),r=a(65978),d=a(67294),o=a(516);t.default=function(){return d.createElement(c.dY,null,d.createElement(d.Suspense,{fallback:d.createElement(r.Z,null)},d.createElement(d.Fragment,null,d.createElement("div",{className:"markdown"},d.createElement("p",null,o.texts[0].value),d.createElement("h3",{id:"1-创建图表实例"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#1-创建图表实例"},d.createElement("span",{className:"icon icon-link"})),"1. 创建图表实例"),d.createElement("p",null,o.texts[1].value),d.createElement(n.Z,{lang:"ts"},o.texts[2].value),d.createElement("p",null,o.texts[3].value),d.createElement("ul",null,d.createElement("li",null,o.texts[4].value,d.createElement("code",null,o.texts[5].value),o.texts[6].value),d.createElement("li",null,o.texts[7].value,d.createElement("code",null,o.texts[8].value),o.texts[9].value)),d.createElement("p",null,o.texts[10].value),d.createElement("h3",{id:"2-render"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#2-render"},d.createElement("span",{className:"icon icon-link"})),"2. render"),d.createElement(n.Z,{lang:"sign"},o.texts[11].value),d.createElement("p",null,o.texts[12].value),d.createElement("h3",{id:"3-update"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#3-update"},d.createElement("span",{className:"icon icon-link"})),"3. update"),d.createElement(n.Z,{lang:"sign"},o.texts[13].value),d.createElement("p",null,o.texts[14].value,d.createElement("code",null,o.texts[15].value),o.texts[16].value),d.createElement("h3",{id:"4-changedata"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#4-changedata"},d.createElement("span",{className:"icon icon-link"})),"4. changeData"),d.createElement(n.Z,{lang:"sign"},o.texts[17].value),d.createElement("p",null,o.texts[18].value),d.createElement("ul",null,d.createElement("li",null,o.texts[19].value),d.createElement("li",null,o.texts[20].value))),d.createElement(l.Z,{path:"dynamic-plots/basic/demo/dynamic-spline.ts",rid:"rect"}),d.createElement("div",{className:"markdown"},d.createElement("h3",{id:"5-changesize"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#5-changesize"},d.createElement("span",{className:"icon icon-link"})),"5. changeSize"),d.createElement(n.Z,{lang:"sign"},o.texts[21].value),d.createElement("p",null,o.texts[22].value,d.createElement("code",null,o.texts[23].value),o.texts[24].value,d.createElement("code",null,o.texts[25].value),o.texts[26].value,d.createElement("code",null,o.texts[27].value),o.texts[28].value),d.createElement("h3",{id:"6-destroy"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#6-destroy"},d.createElement("span",{className:"icon icon-link"})),"6. destroy"),d.createElement(n.Z,{lang:"sign"},o.texts[29].value),d.createElement("p",null,o.texts[30].value),d.createElement("h3",{id:"7-on"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#7-on"},d.createElement("span",{className:"icon icon-link"})),"7. on"),d.createElement(n.Z,{lang:"sign"},o.texts[31].value),d.createElement("p",null,o.texts[32].value,d.createElement("a",{href:"https://g2.antv.vision/zh/docs/api/general/event"},o.texts[33].value),o.texts[34].value),d.createElement("h3",{id:"8-once"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#8-once"},d.createElement("span",{className:"icon icon-link"})),"8. once"),d.createElement(n.Z,{lang:"sign"},o.texts[35].value),d.createElement("p",null,o.texts[36].value),d.createElement("h3",{id:"9-off"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#9-off"},d.createElement("span",{className:"icon icon-link"})),"9. off"),d.createElement(n.Z,{lang:"sign"},o.texts[37].value),d.createElement("p",null,o.texts[38].value),d.createElement("h3",{id:"10-setstate"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#10-setstate"},d.createElement("span",{className:"icon icon-link"})),"10. setState"),d.createElement(n.Z,{lang:"sign"},o.texts[39].value),d.createElement("p",null,o.texts[40].value),d.createElement("ul",null,d.createElement("li",null,o.texts[41].value),d.createElement("li",null,o.texts[42].value),d.createElement("li",null,o.texts[43].value)),d.createElement("p",null,o.texts[44].value),d.createElement("h3",{id:"11-getstates"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#11-getstates"},d.createElement("span",{className:"icon icon-link"})),"11. getStates"),d.createElement(n.Z,{lang:"sign"},o.texts[45].value),d.createElement("p",null,o.texts[46].value),d.createElement("h3",{id:"12-addannotations"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#12-addannotations"},d.createElement("span",{className:"icon icon-link"})),"12. addAnnotations"),d.createElement(n.Z,{lang:"sign"},o.texts[47].value),d.createElement("p",null,o.texts[48].value),d.createElement(n.Z,{lang:"ts"},o.texts[49].value),d.createElement("p",null,o.texts[50].value),o.texts[51].value,d.createElement("h3",{id:"13-removeannotations"},d.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#13-removeannotations"},d.createElement("span",{className:"icon icon-link"})),"13. removeAnnotations"),d.createElement(n.Z,{lang:"sign"},o.texts[52].value),d.createElement("p",null,o.texts[53].value)))))}},47407:function(e,t,a){a.d(t,{T:function(){return n.T}});var n=a(27822)},56184:function(e,t,a){a.d(t,{p:function(){return n.p}});var n=a(67810)},62207:function(e,t,a){a.d(t,{G:function(){return n.G}});var n=a(1834)},71362:function(e,t,a){a.d(t,{S:function(){return n.S}});var n=a(97137)},516:function(e,t,a){a.r(t),a.d(t,{texts:function(){return n}});const n=[{value:"G2Plot 的核心技术架构非常简单，所有的 Plot 图表都继承于一个基类，基类为所有的图表提供的了通用的 API 方法，而每个具体的可视化图表仅仅处理自己不同的配置项。所以 API 部分，所有图表基本都是一样，除了部分图表（比如：仪表盘、水波图）在 changeData API 上有细微的区别。",paraId:0},{value:"所有图表的创建，都是一样的，从 G2Plot 中引入对应的 Plot class，然后创建实例，构造函数有两个参数：",paraId:1,tocIndex:0},{value:"import { Line } from '@antv/g2plot';\n\nconst line = new Line(container, options);\n// 1. `container`： 图表渲染的 DOM 容器 id 或者 HTMLElement 实例\n// 2. `options`： 图表配置数据，不同的图表功能请参考[基础图表 API]\n",paraId:2,tocIndex:0},{value:"创建好的图表实例，都具有两个公开属性：",paraId:3,tocIndex:0},{value:"container ",paraId:4,tocIndex:0},{value:"HTMLElement",paraId:4,tocIndex:0},{value:": 图表渲染的 DOM 容器。",paraId:4,tocIndex:0},{value:"options ",paraId:4,tocIndex:0},{value:"PlotOptions",paraId:4,tocIndex:0},{value:": 图表当前的所有全量配置项 options，是有用户传入，以及图表内置的默认配置项合并之后结果。",paraId:4,tocIndex:0},{value:"对于 API，分别罗列图表实例的所有 API 方法。如果按照功能分类，主要可以分成为：生命周期函数、事件、状态量 等 API",paraId:5,tocIndex:0},{value:"plot.render();\n",paraId:6,tocIndex:1},{value:"通过图表构造方法创建实例之后，调用这个方法，可以将图表渲染到指定的 DOM 容器中。",paraId:7,tocIndex:1},{value:"plot.update(options: Partial<PlotOptions>);\n",paraId:8,tocIndex:2},{value:"通过这个方法，可以增量的更新图表配置，方法会自动将传入的增量配置合并到当前的配置项中，并自动调用 ",paraId:9,tocIndex:2},{value:"render",paraId:9,tocIndex:2},{value:" 方法，无需手动调用。",paraId:9,tocIndex:2},{value:"plot.changeData(data: object[] | number);\n",paraId:10,tocIndex:3},{value:"通过这个方法，可以修改图表的数据，并自动重新渲染，大部分图表的数据都是二维数组，而部分图表可能数据结构不一样，比如：",paraId:11,tocIndex:3},{value:"仪表盘、水波图 等指标类的，直接传入更新的 percent 数值",paraId:12,tocIndex:3},{value:"双轴图等复合类图表，直接传入自己的 data 数据结构",paraId:12,tocIndex:3},{value:"plot.changeSize(width: number, height: number);\n",paraId:13,tocIndex:4},{value:"通过这个方法，手动指定图表的大小。当前如果图表配置 ",paraId:14,tocIndex:4},{value:"autoFit",paraId:14,tocIndex:4},{value:" = true 的时候，图表大小会自动跟随容器的大小，只需要使用 css 约定外层 DOM 容器大小，图表即可自动 跟随 resize；如果 ",paraId:14,tocIndex:4},{value:"autoFit",paraId:14,tocIndex:4},{value:" = false，那么可以使用 ",paraId:14,tocIndex:4},{value:"changeSize",paraId:14,tocIndex:4},{value:" 这个方法，自定义图表的宽高大小。",paraId:14,tocIndex:4},{value:"plot.destroy();\n",paraId:15,tocIndex:5},{value:"完全销毁整个画布，回收所有资源，仅仅保留传入的 DOM container 容器。一般在组件销毁的时候调用，图表销毁之后，不可再次使用。",paraId:16,tocIndex:5},{value:"plot.on(event: string, callback: Function);\n",paraId:17,tocIndex:6},{value:"多次监听某一个图表事件，并触发一个回调函数。事件机制是直接透传 G2 的事件能力，具体所有事件列表以及回调函数参数可以见 ",paraId:18,tocIndex:6},{value:"G2 事件机制",paraId:18,tocIndex:6},{value:"。",paraId:18,tocIndex:6},{value:"plot.once(event: string, callback: Function);\n",paraId:19,tocIndex:7},{value:"监听一次某一个图表事件，并触发一个回调函数，在触发一次之后，自动解除这个事件的监听。",paraId:20,tocIndex:7},{value:"plot.off(event?: string, callback?: Function);\n",paraId:21,tocIndex:8},{value:"解除事件的监听，可以针对某一个监听函数去解绑；也可以一次解除所有的事件；当然也可以什么参数都不传，解绑所有事件监听。",paraId:22,tocIndex:8},{value:"plot.setState(state?: 'active' | 'inactive' | 'selected', condition?: Function, status: boolean = true);\n",paraId:23,tocIndex:9},{value:"状态量是 G2 提供的机制，G2 中设定一个元素具备有三种状态：",paraId:24,tocIndex:9},{value:"'active'",paraId:25,tocIndex:9},{value:"'inactive'",paraId:25,tocIndex:9},{value:"'selected'",paraId:25,tocIndex:9},{value:"通过这个 API 可以根据 condition 条件来过滤元素，并设置这些元素的当前状态。",paraId:26,tocIndex:9},{value:"plot.getStates();\n",paraId:27,tocIndex:10},{value:"获取当前图表所有的状态量信息。",paraId:28,tocIndex:10},{value:"plot.addAnnotations(annotations: Annotation[], view?: View) => void;\n",paraId:29,tocIndex:11},{value:"示例代码：",paraId:30,tocIndex:11},{value:"dualAxes.addAnnotations(\n   [\n    {\n      type: 'text',\n      position: ['median', 'median'],\n      content: '辅助文本',\n      style: {\n        fill: 'red',\n      },\n    },\n  ],\n  dualAxes.chart.views[0]\n);\n",paraId:31,tocIndex:11},{value:"批量为指定的视图增加标注（默认为当前图表）。通过 id 匹配，如果匹配成功，则更新，匹配不成功则增加。",paraId:32,tocIndex:11},{value:"\n ",paraId:33},{value:"plot.removeAnnotations(annotations: { id: string }[]) => void;\n",paraId:34,tocIndex:12},{value:"批量为当前图表删除图表标注。通过 id 匹配，如果匹配成功，则删除。",paraId:35,tocIndex:12}]}}]);