"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4656],{61204:function(e,t,n){n.r(t);n(72269),n(93359),n(61788),n(19977),n(25809);var a=n(90978),l=n(96057),r=(n(64406),n(36930),n(85956)),c=n(65978),u=n(67294),d=n(49967);t.default=function(){return u.createElement(r.dY,null,u.createElement(u.Suspense,{fallback:u.createElement(c.Z,null)},u.createElement(u.Fragment,null,u.createElement("div",{className:"markdown"},u.createElement("h2",{id:"introduction"},u.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#introduction"},u.createElement("span",{className:"icon icon-link"})),"Introduction"),u.createElement("p",null,d.texts[0].value),u.createElement("p",null,d.texts[1].value),u.createElement("ol",null,u.createElement("li",null,d.texts[2].value),u.createElement("li",null,d.texts[3].value)),u.createElement("p",null,d.texts[4].value),u.createElement(l.Z,null,u.createElement("thead",null,u.createElement("tr",null,u.createElement("th",{align:"center"},u.createElement("strong",null,d.texts[5].value)),u.createElement("th",{align:"center"},u.createElement("strong",null,d.texts[6].value)))),u.createElement("tbody",null,u.createElement("tr",null,u.createElement("td",{align:"center"},d.texts[7].value),u.createElement("td",{align:"center"},u.createElement("strong",null,d.texts[8].value),d.texts[9].value)),u.createElement("tr",null,u.createElement("td",{align:"center"},d.texts[10].value),u.createElement("td",{align:"center"},d.texts[11].value)),u.createElement("tr",null,u.createElement("td",{align:"center"},d.texts[12].value),u.createElement("td",{align:"center"},d.texts[13].value)),u.createElement("tr",null,u.createElement("td",{align:"center"},d.texts[14].value),u.createElement("td",{align:"center"},d.texts[15].value)),u.createElement("tr",null,u.createElement("td",{align:"center"},d.texts[16].value),u.createElement("td",{align:"center"},d.texts[17].value)),u.createElement("tr",null,u.createElement("td",{align:"center"},d.texts[18].value),u.createElement("td",{align:"center"},d.texts[19].value)))),u.createElement("h2",{id:"qucik-start"},u.createElement("a",{"aria-hidden":"true",tabIndex:"-1",href:"#qucik-start"},u.createElement("span",{className:"icon icon-link"})),"Qucik start"),u.createElement("div",{className:"sign"},u.createElement(a.Z,{lang:"ts"},d.texts[20].value)),u.createElement("p",null,d.texts[21].value,u.createElement("a",{href:"/en/examples/plugin/facet#column",target:"blank"},d.texts[22].value),d.texts[23].value),u.createElement("p",null,d.texts[24].value,u.createElement(r.rU,{to:"/en/docs/api/advanced-plots/facet"},d.texts[25].value),d.texts[26].value)))))}},47407:function(e,t,n){n.d(t,{T:function(){return a.T}});var a=n(27822)},56184:function(e,t,n){n.d(t,{p:function(){return a.p}});var a=n(67810)},62207:function(e,t,n){n.d(t,{G:function(){return a.G}});var a=n(1834)},71362:function(e,t,n){n.d(t,{S:function(){return a.S}});var a=n(97137)},49967:function(e,t,n){n.r(t),n.d(t,{texts:function(){return a}});const a=[{value:"分面（Facet）是指利用 G2 提供的 View 递归嵌套能力，将一份数据按照某个维度分隔成若干子集，然后创建一个图表的集合，将每一个数据子集绘制到图表矩阵的窗格中。",paraId:0,tocIndex:0},{value:"分面主要提供了两个功能：",paraId:1,tocIndex:0},{value:"按照指定的维度划分数据集；",paraId:2,tocIndex:0},{value:"对图表进行排版和布局。",paraId:2,tocIndex:0},{value:"对于探索型数据分析来说，分面是一个强大有力的工具，能帮我们快速地分析出数据各个子集模式的异同。目前 G2 内置的分面包括六种：rect、list、circle、tree、mirror 和 matrix，具体描述如下表所示：",paraId:3,tocIndex:0},{value:"分面类型",paraId:4,tocIndex:0},{value:"说明",paraId:4,tocIndex:0},{value:"rect",paraId:4,tocIndex:0},{value:"默认类型",paraId:4,tocIndex:0},{value:"，指定 2 个维度作为行列，形成图表的矩阵。",paraId:4,tocIndex:0},{value:"list",paraId:4,tocIndex:0},{value:"指定一个维度，可以指定一行有几列，超出自动换行。",paraId:4,tocIndex:0},{value:"circle",paraId:4,tocIndex:0},{value:"指定一个维度，沿着圆分布。",paraId:4,tocIndex:0},{value:"tree",paraId:4,tocIndex:0},{value:"指定多个维度，每个维度作为树的一级，展开多层图表。",paraId:4,tocIndex:0},{value:"mirror",paraId:4,tocIndex:0},{value:"指定一个维度，形成镜像图表。",paraId:4,tocIndex:0},{value:"matrix",paraId:4,tocIndex:0},{value:"指定一个维度，形成矩阵分面。",paraId:4,tocIndex:0},{value:"import { Facet } from '@antv/g2plot';\n\nfetch('https://gw.alipayobjects.com/os/antfincdn/VnrXpYSuqW/circle-pie.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const plot = new Facet('container', {\n      type: 'circle',\n      fields: ['clarity'],\n      data,\n      tooltip: { showMarkers: false },\n      meta: {\n        cut: {\n          sync: true,\n        },\n      },\n      eachView: (view, f) => {\n        return {\n          type: 'pie',\n          options: {\n            data: f.data,\n            angleField: 'mean',\n            colorField: 'cut',\n            pieStyle: { stroke: null },\n          },\n        };\n      },\n    });\n    plot.render();\n  });\n\n",paraId:5,tocIndex:1},{value:"📊 See more ",paraId:6,tocIndex:1},{value:"examples",paraId:6,tocIndex:1},{value:".",paraId:6,tocIndex:1},{value:"🎨 For an overview of the gauge plot options see the ",paraId:7,tocIndex:1},{value:"API reference",paraId:8,tocIndex:1},{value:".",paraId:7,tocIndex:1}]}}]);